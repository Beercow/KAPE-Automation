$text = {
param
(
    [Parameter(Mandatory)]
    [string]
    $TIName,

    [Parameter(Mandatory)]
    [string]
    $TIFileName,
    
    [Parameter(Mandatory)]
    [string]
    $Kape
)
Start-Transcript -Path "$($Env:SystemDrive)\Temp\KAPE-transcript.txt"
Write-Host "starting Script"
function Send-ChangeNotification {
    $EmailBody = "
        KAPE results can be viewed at:`n`r
        $linkpath

    "

    $Params = @{
        'From' = '<from_address>'
        'Subject' = "Collection Complete for $asset"
        'To' = '<to_address>'
        'SMTPServer' = "<smtpserver>"
        'Port' = "<port_number>"
        'Body' = $EmailBody
    }
    $userPassword = ''
    $userPassword = ConvertTo-SecureString -String $userPassword -AsPlainText -Force
    $mycreds = New-Object System.Management.Automation.PSCredential ("<user_name>", $userPassword)
    Send-MailMessage @Params -UseSsl -Credential $mycreds
} 
$TIName=$TIName -replace '"', ""
$fileEvent = $TIName
$filePath = $TIName.Substring(0, $TIName.lastIndexOf('\')) + "\"
$zipSearch = $TIFileName.split('_ConsoleLog_SFTP')[0]
$zipFile = Get-ChildItem $filePath | Where-Object {$_.Name -like "*"+$zipSearch+"*zip"}
$zipDir = $zipFile.BaseName
$zipName = $zipFile.Name
[void] (New-Item -Path $filePath$zipDir -ItemType Directory -Force)
$Shell = new-object -com Shell.Application
$Shell.Namespace("$filePath$zipDir").copyhere($Shell.NameSpace("$filePath$zipName").Items(),0x14)
$module = (Get-ChildItem $filePath$zipDir"\mout\--module").Name
$mountOut = $filePath+$zipDir+"\mount.vhdx.txt"
$vdhxFile = $filePath+$zipDir+"\"+$zipDir+".vhdx"
$diff = $vdhxFile+".diff"
$aim = "<path_to_aim_cli>"
start-process -FilePath $aim -ArgumentList "/filename=$vdhxFile /writeoverlay=$diff /mount /background" -NoNewWindow -RedirectStandardOutput $mountOut
$DriveLetter = Get-Volume | Where-Object {$_.FileSystemLabel -like "KAPE (" + $zipDir.substring(0,13) + ":" + $zipDir.substring(13,2) + ":" + $zipDir.substring(15,2) + ")"} |ForEach-Object {$_.DriveLetter}
& $Kape --msource $DriveLetter":\" --mdest $filePath$zipDir"\mout" --module $module --debug --trace
$mount = gc $mountOut | Select-String '/dismount.*' -AllMatches | ForEach-Object {$_.Matches} | ForEach-Object {$_.Groups[0].Value}
start-process -FilePath $aim -ArgumentList "$mount" -NoNewWindow -wait
Remove-Item $filePath$zipDir"\*.vhdx*"
$asset = $asset = $zipDir.split('_')[1]
$LinkPath = $filePath+$zipDir+"\mout"
Send-ChangeNotification
Stop-Transcript -WarningAction Ignore
}

$PScommand = [Convert]::ToBase64String([System.Text.Encoding]::Unicode.GetBytes($text))

$fname = "KAPE Automation Filter"

$cname = "KAPE Automation Consumer"

$CommandLineTemplate = "cmd /c echo %TargetInstance.Name%◙%TargetInstance.FileName%◙<path_to_kape.exe>| powershell -noprofile -encodedcommand $PScommand"

$query = "Select * from __InstanceCreationEvent within 30 where targetInstance isa 'Cim_Datafile' AND TargetInstance.Drive = 'D:' AND TargetInstance.Path LIKE '%KAPE_data_push_%' AND TargetInstance.FileName LIKE '%_ConsoleLog_SFTP%' AND TargetInstance.Extension = 'txt'"

$WMIEventFilter = Set-WmiInstance -Class __EventFilter -Namespace "root\subscription" -Arguments @{Name=$fname;EventNameSpace="root\cimv2";QueryLanguage="WQL";Query=$query}

$WMIEventConsumer = Set-WmiInstance -Class CommandLineEventConsumer -Namespace "root\subscription" -Arguments @{Name=$cname;CommandLineTemplate=$CommandLineTemplate}

Set-WmiInstance -Class __FilterToConsumerBinding -Namespace "root\subscription" -Arguments @{Filter=$WMIEventFilter;Consumer=$WMIEventConsumer} | out-null

# Removing WMI Subscriptions using Remove-WMIObject
# Event Filter
Get-WMIObject -Namespace root\Subscription -Class __EventFilter -Filter "Name='KAPE Automation Filter'" | Remove-WmiObject -Verbose
# Event Consumer
Get-WMIObject -Namespace root\Subscription -Class CommandLineEventConsumer -Filter "Name='KAPE Automation Consumer'" | Remove-WmiObject -Verbose
 
# Binding
Get-WMIObject -Namespace root\Subscription -Class __FilterToConsumerBinding -Filter "__Path LIKE '%KAPE%'" | Remove-WmiObject -Verbose
